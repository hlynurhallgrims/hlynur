% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_string.R
\name{clean_string}
\alias{clean_string}
\title{Cleans character strings}
\usage{
clean_string(
  string,
  case = c("snake", "lower_camel", "upper_camel", "screaming_snake", "lower_upper",
    "upper_lower", "all_caps", "small_camel", "big_camel", "parsed", "mixed")
)
}
\arguments{
\item{string}{the input string.}

\item{case}{The desired target case (default is \code{"snake"}), indicated by these possible values:
\itemize{
 \item{\code{"snake"} produces snake_case}
 \item{\code{"lower_camel"} or \code{"small_camel"} produces lowerCamel}
 \item{\code{"upper_camel"} or \code{"big_camel"} produces UpperCamel}
 \item{\code{"screaming_snake"} or \code{"all_caps"} produces ALL_CAPS}
 \item{\code{"lower_upper"} produces lowerUPPER}
 \item{\code{"upper_lower"} produces UPPERlower}
 \item{\code{"parsed"}, \code{"mixed"}, \code{"none"}: less-common cases offered by \code{snakecase::to_any_case}.  See \code{\link[snakecase]{to_any_case}} for details.}
 }}
}
\value{
Returns the clean string.
}
\description{
This is a variant on \code{\link[janitor]{clean_names}}. It produces strings that consist only of the \code{_} character, numbers, and letters. It differs from its parent function in that it neither avoids duplicates nor strings starting with a numeral.
Capitalization preferences can be specified using the \code{case} parameter.

Accented characters are
transliterated to ASCII.  For example, an "o" with a German umlaut over it becomes "o", and the Spanish character "enye" becomes "n".
}
\examples{
# not run:
# clean_string(" Þetta: er hræðilegur textastrengur")
}
